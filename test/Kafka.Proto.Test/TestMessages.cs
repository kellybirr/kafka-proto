// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: testMessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Fluffy.Kafka.Proto.Test {

  /// <summary>Holder for reflection information generated from testMessages.proto</summary>
  public static partial class TestMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for testMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ0ZXN0TWVzc2FnZXMucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiKDAQoKVGVz",
            "dFJlY29yZBIKCgJpZBgBIAEoCRIPCgdpbnRlZ2VyGAIgASgFEhAKCGZsb2F0",
            "aW5nGAMgASgBEjEKEGVudW1lcmF0ZWRfdmFsdWUYBCABKA4yFy5nb29nbGUu",
            "cHJvdG9idWYuTXlFbnVtEhMKC3RleHRfdmFsdWVzGAUgAygJKikKBk15RW51",
            "bRIJCgVWQUxfMBAAEgkKBVZBTF8xEAESCQoFVkFMXzIQAkIaqgIXRmx1ZmZ5",
            "LkthZmthLlByb3RvLlRlc3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Fluffy.Kafka.Proto.Test.MyEnum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Fluffy.Kafka.Proto.Test.TestRecord), global::Fluffy.Kafka.Proto.Test.TestRecord.Parser, new[]{ "Id", "Integer", "Floating", "EnumeratedValue", "TextValues" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MyEnum {
    [pbr::OriginalName("VAL_0")] Val0 = 0,
    [pbr::OriginalName("VAL_1")] Val1 = 1,
    [pbr::OriginalName("VAL_2")] Val2 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class TestRecord : pb::IMessage<TestRecord> {
    private static readonly pb::MessageParser<TestRecord> _parser = new pb::MessageParser<TestRecord>(() => new TestRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Fluffy.Kafka.Proto.Test.TestMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecord(TestRecord other) : this() {
      id_ = other.id_;
      integer_ = other.integer_;
      floating_ = other.floating_;
      enumeratedValue_ = other.enumeratedValue_;
      textValues_ = other.textValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRecord Clone() {
      return new TestRecord(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "integer" field.</summary>
    public const int IntegerFieldNumber = 2;
    private int integer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Integer {
      get { return integer_; }
      set {
        integer_ = value;
      }
    }

    /// <summary>Field number for the "floating" field.</summary>
    public const int FloatingFieldNumber = 3;
    private double floating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Floating {
      get { return floating_; }
      set {
        floating_ = value;
      }
    }

    /// <summary>Field number for the "enumerated_value" field.</summary>
    public const int EnumeratedValueFieldNumber = 4;
    private global::Fluffy.Kafka.Proto.Test.MyEnum enumeratedValue_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Fluffy.Kafka.Proto.Test.MyEnum EnumeratedValue {
      get { return enumeratedValue_; }
      set {
        enumeratedValue_ = value;
      }
    }

    /// <summary>Field number for the "text_values" field.</summary>
    public const int TextValuesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_textValues_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> textValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TextValues {
      get { return textValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Integer != other.Integer) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Floating, other.Floating)) return false;
      if (EnumeratedValue != other.EnumeratedValue) return false;
      if(!textValues_.Equals(other.textValues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Integer != 0) hash ^= Integer.GetHashCode();
      if (Floating != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Floating);
      if (EnumeratedValue != 0) hash ^= EnumeratedValue.GetHashCode();
      hash ^= textValues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Integer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Integer);
      }
      if (Floating != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Floating);
      }
      if (EnumeratedValue != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EnumeratedValue);
      }
      textValues_.WriteTo(output, _repeated_textValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Integer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer);
      }
      if (Floating != 0D) {
        size += 1 + 8;
      }
      if (EnumeratedValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EnumeratedValue);
      }
      size += textValues_.CalculateSize(_repeated_textValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRecord other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Integer != 0) {
        Integer = other.Integer;
      }
      if (other.Floating != 0D) {
        Floating = other.Floating;
      }
      if (other.EnumeratedValue != 0) {
        EnumeratedValue = other.EnumeratedValue;
      }
      textValues_.Add(other.textValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Integer = input.ReadInt32();
            break;
          }
          case 25: {
            Floating = input.ReadDouble();
            break;
          }
          case 32: {
            enumeratedValue_ = (global::Fluffy.Kafka.Proto.Test.MyEnum) input.ReadEnum();
            break;
          }
          case 42: {
            textValues_.AddEntriesFrom(input, _repeated_textValues_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
